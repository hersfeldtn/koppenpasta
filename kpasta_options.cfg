#Some notes:
# lines starting with # are comments, [ are section heads, others are actual options
# Each option is preceded by an explanation
# Extra options can be added or existing options can be removed and neither should break the script
# Sections are unimportant, they're just here for organization
# Values will be interpreted like so:
#  integers if they contain only numbers and/or a minus sign (-)
#  floats if they also have a decimal point (.)
#  strings if they contain other characters, except for a few special cases:
#   None if they read none, None, or None
#   boolean True if they read true, True, or TRUE
#   boolean False if they read false, False, or FALSE
#	if they contain ( or , will attempt to read as a tuple, will read as string if this fails

    #General climate type and color
[Gen_type]

    #land climate zones type and subtype
    # all zones have a standard subtype named full
    # here's all the included zones, with non-standard subtypes indented (don't include parentheticals):
    #  Koppen-Geiger
    #       no_As               (no As zone)
    #       two_letter          (defined by only the first two letters in the designation)
    #       reduced             (reduced set of 14 zones)
    #       groups              (only 5 main groups)
    #  Trewartha            (based on Belda et al. 2014)
    #       reduced             (no As or Eo zones)
    #       groups              (only 6 main groups)
    #  Holdridge
    #  Thornthwaite		    (Thornthwaite-Feddemma)
    #       variability         (climate variability type)
    #  Prentice			    (Prentice et al. 1992 BIOME1 model)
    #  Pasta			    (Pasta Bioclimate zones)
    #       no_pluv             (no pluvial zones)
    #       earthlike           (earthlike only; no H, E, or TQ, ignore light levels)
    #       earthlike_no_pluv   (earthlike only and no pluvial zones)
    #  Whittaker
    #  Woodward
    #  IPCC
    #  WCR				    (World Climate Regions; Sayre et al. 2020)
    #  TwoParamKG		    (Two-parameter Koppen-alike)
    #       groups              (only 5 main groups)
    #  KG_unproxied		    (un-proxied Koppen-Geiger)
    #       (shares KG subtypes)
land_type = Koppen-Geiger
land_subtype = full
    #Land color scheme
    # all types have a default scheme named standard
    # and an option for importing a color file named file
    # other options:
    #   Koppen-Geiger:  alt_red     (alternative red-rainforest scheme)
    #                   true        ("true" color approximation)
    #   Trewartha:      kalike      (copies standard colors of nearest KG zones)
    #   Holdridge:      vibrant     (alternative rainbow color scheme)
	#	Pasta:			true		("true" color approximation)
    #   (TwoParamKG and KG_unproxied share KG options)
land_color = standard
    #Sea zone type and subtypes
    # as with land, all have a default full zone
    #  sea_standard         (standard set of up to 4 zones)
    #       no_trop             (no tropical; show only ice cover)
    #       flat                (all sea one zone)
    #  sea_Pasta		    (Pasta Bioclimate sea zones)
    #       earthlike           (only earthlike zones; no dark, hot, or extraseasonal)
    #       no_trop             (only earthlike and no tropical; show only ice cover)
    #  sea_none             (assume no ocean, produce only land zones)
sea_type = sea_standard
sea_subtype = full
    #Sea color scheme
    # as with land, all have standard and file
    # other options:
    #   sea_standard:   true        ("true" color approximation, only distinguishes seas and permanent ice)
    #                   white       (white for all zones)
	#	sea_Pasta:		true		("true" color approximation, same as for standard)
sea_color = standard
    #Color file
    # None for no file input, otherwise path to file
    # same file used for land and sea
color_file = None

    #Input data processing
[Gen_process]

    #Method for combining data from multiple files
    #   data        (extract data from all files, average together month-by-month, then calculate parameters from averages as if one year)
    #   param       (individually extract data from each file and then calculate parameters for that file, then average results from all files)
    #   seq         (link files together in order of import to form one long year)
file_combine: data
    #average data from all months together before finding parameters, such that there's no seasonal variation; True/False
seasonless = False
    #blend land and sea maps together into single image rather than outputting separate maps; True/False
blend = True
    #reduce number of months by binning them together;
    # sequential months are averaged together and then that average treated as a month in the parameters
    # 0 or 1 for no binning, other integer for size of each bin
bin_months = 0
    #length of each month (i.e. each data point in the file) relative to 30-day, 720-hour Earth month
    # used for calculation of GDD and GInt
month_length = 1

    #Interpolation options
[Gen_interp]

    #scale of interpolation;
    # 0 for no interpolation
    # otherwise, resolution is rescaled by this number (rounded to nearest whole number)
interp_scale = 0
    #interpolation type
    # options include
    #   spline      (standard, designed for use on sphere)
    #   linear      (recommended alternative if spline has issues)
    #   nearest     (essentially just upscaling)
    #   slinear
    #   cubic
    #   quintic
    #   pchip
interp_type = spline
    #"dummy" sea ice cover
    # adds sea ice to land wherever there is sea ice in at least 1 adjacent cell
    #  helps ensure sea ice remains contiguous with land (True/False)
dummy_ice = True
    #topography map for temperature adjustment
    # path to greyscale heightmap (black low, white high)
    # temperatures will be adjusted based on difference between height map and elevation in file
    # None for no temperature adjustment
topo_map = None
    #maximum elevation in topography map (m)
maxel = 1000
    #minimum elevation in topography map (m)
minel = 0
    #sea level elevation in topography map (m)
sealev = 0
    #gravity of planet, for scaling of topography (m/s^2); 9.81 for Earth
gravity = 9.81
    #if blending land and sea maps, use sea level on topography map for blending (True/False)
blend_topo = True

    #Output options
[Gen_output]

    #make a key showing color and name of all climate zones that appear on the map (True/False)
make_key = False
    #make a chart showing the average temperature and precipitation of every point on the map, colored by zone (True/False)
make_chart = False
    #name of the output images
outname = output

    #Extra general processing options
[Extra_general]

    #threshold of geopotential (gravity*elevation) difference between adjacent cells for them to be used in determining lapse rate for temperature adjustment in interpolation (m^2/s^2)
    #   default 981, corresponding to 100 m difference in Earth gravity
lapse_threshold = 981
    #use efficient climate algorithms, applied to whole map at once rather than iterating cell-by-cell
    #   so far only an example algorithm for sea zones is implemented (True/False)
efficient = False
    #scale to apply to image after it is produced (just image scaling, no interpolation)
    # can be number to multiply by or (x,y) resolution
    # None for no scaling
image_scale = None
    #produce debug file
    # netCDF file containing all data and parameters produced during script (True/False)
debug_file = False
    #force use of Alternate_Data function
    # can be useful for using unusual input types (True/False)
force_alt_data = False
    #number to add to all temperature parameters retrieved from files
    #   -273.15 by default, converting from K to C
temp_adjust = -273.15
    #number to multiply all precipitation-related parameters retrieved from files
    #   2592000000 by default, converting from m/s to mm/month
precip_adjust = 2592000000

    #Potential evapotranspiration options; used for holdridge, prentice, pasta, and unproxied KG
[PET]

    #PET estimation methodology
    #   asce-pm         (ASCE Penman-Monteith; requires temp, net surface radiation, and relative humidity, can also incorporate daily temp max and min, surface pressure, wind speed, soil temperature, and vegetation cover)
    #   hargreaves      (Hargreaves; requires temp and incident surface radiation)
    #   kalike          (Koppen-alike; requires only temp)
pet_method = asce-pm
    #backup surface pressure in kPa for asce-pm if data not available
    # default 101.3 for Earthlike atmosphere
pet_backup_ps = 101.3
    #backup windspeed in m/s for asce-pm if data not available
    # default 1.0
pet_backup_wind = 1.0
    #effective gas constant in J/kg*K
	# depends on average molar mass of atmosphere; varies with composition but not total pressure
    # can be found in DIAG file for exoplasim outputs
    # default 287.05 for Earthlike atmosphere
pet_gascon = 287.05
    #use vegf parameter for vegetation cover for asce-pm
    # otherwise will assume constant 0.5 (True/False)
pet_use_vegf = True

	#Evapotranspiration options; used for prentice, pasta, and unproxied KG
[Evap]

	#when interpolating, estimate land-equivalent evaporation for ocean cells
	# using PET, precipitation, and a simple soil model
	# to be used for any small land areas that appear in those cells at higher resolution
evap_estimate_sea = True

    #Growing Degree-Days options; used for prentice, pasta, and unproxied KG
[GDD]

    #productivity modifier
    # multiplies all GDD counts (and reduces GInt counts)
    # default 1
gdd_productivity_modifier = 1
    #when counting GDD, count largest contiguous accumulation of GDD, rather than simple total
    # so if 2 separate growing seasons, will only count longest
    # also applies to GInt (True/False)
gdd_require_contiguous = True
    #when counting GDD, if all months have some GDD, treat as effectively infinite
    # also applies to GInt (True/False)
gdd_indicate_inf = True
	#limit GDD count based on incident solar radiation
	# with resulting GDD a minimum of the temperature GDD and the light GDD limit
gdd_limit_light = True
    #ratio of photosynthetically active radiation (PAR) to total incident radiation
    # used for determining light-limited GDD maximum
    # 0.5 for sunlike stars
gdd_par_ratio = 0.5

    #Absolute temperature options; used for woodward, prentice, pasta, and unproxied KG
[Abs_Temp]

    #Temperature threshold tunings (also affects GrS for pasta)
    #   eps         (tunings for use with typical ExoPlaSim data)
    #   tclim       (tunings for use with Terraclimate Earth data)
    #   tavg        (tunings for use with monthly average temperature when no absolute temperature data is available)
temp_tunings = eps
	#Adjust temperate extremes based on difference between average 2-meter air temperature and surface temperature
	# because extremes are sampled from surface temp in ExoPlaSim,
	# but 2-meter temp is usually prefered for climate classification
temp_adjust_ts = True

    #Sea climate options, for both standard and pasta
[Sea]

    #use ts (surface temperature) rather than tas (2-meter air temperature) for sea zones (True/False)
sea_use_ts = True
    #determine ice cover based on -2 C temperature threshold rather than sea ice data (True/False)
sea_ice_use_temp = False

    #Koppen-Geiger options; those marked (t) also apply to Trewartha
[Koppen-Geiger]

    #(t)define summer by solar zenith angle rather than temperature (True/False)
    # used in old schemes but no longer popular
kg_summer_zenith = False
    #(t)minimum winter temperature boundary for temperate (C) and continental (D) zones in C
    # and optionally also divides hot (Bxh) and cold (Bxk) arid zones
    # usually 0 today, some old schemes use -3
kg_temperate_min = 0
    #divide hot (Bxh) and cold (Bxk) zones by average annual temp of 18 C rather than above winter minimum
    # standards vary in current use (True/Falce)
kg_arid_avg = False
    #(t)maximum allowable precipitation of driest month of summer for mediterranean zones in mm/month
    # usually 30, some sources use 40
kg_med_summer_precip = 30
    #(t)define wet-summer zones based on >70% of total rain in summer rather than seasonal extremes (or 10/1 ratio for Trewartha)
kg_wet_summer_total = False
    #additional requirements for wet season
    #   med_strict          (Xs zones must have more total rain in winter than summer)
    #   sum_strict          (Xw zones must have more total rain in summer than winter)
    #   all_strict          (apply both above requirements for Xs and Xw zones)
kg_wet_season_req = med_strict
    #wet-summer zones get priority over mediterranean where requirements for both are med (True/False)
kg_wet_summer_priority = False
    #(t)priority of assignment of arid (B) and polar (E) zones where requirements for both are met
    #   arid        (B before E: all sufficiently arid zones will be classified as B regardless of temperature)
    #   EF          (EF before B, B before ET: areas with a max temp below 0 C will always be ET rather than B)
    #   ET          (E before B: areas with a max temp below 10 C will always be E rather than B)
kg_arid_polar_priority = arid
    #Use Trewartha arid threshold formula for K-G (True/False)
kg_trewartha_arid = False
    #use Trewartha Xs/Xw definitions for K-G (True/False)
kg_trewartha_seasons = False

    #Holdridge options
[Holdridge]

    #index zones based on precipitation and biotemperature only, without using PETR (True/False)
h_no_pet = False
    #estimate biotemperature from average annual temperature using fit to Earth values, rather than using monthly temperatures (True/False)
h_estimate_biot_avg = False

    #Pasta bioclimate options; those marked (kg) also apply to unproxied KG
[Pasta]
    
    #calculate boiling point from surface pressure, rather than assuming constant 100 C (True/False)
pas_boil_pres = True
    #(kg) definition for CI zone (and EF for unproxied KG)
	#	ice			(determine based on snow depth, but when interpolating adjust based on maximum surface temperature)
	#	ice_noadj	(as above, but don't adjust when interpolating)
	#	maxt		(determine based on maximum surface temperature < 0)
	#	tavg		(determine based on monthly average 2-meter air temperature < 0)
pas_ice_def = ice